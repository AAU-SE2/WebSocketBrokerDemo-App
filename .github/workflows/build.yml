name: SonarQube

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout full history for better Sonar analysis
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Set up Java 17 (required by your Gradle build & Sonar)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      # 3) Cache SonarQube scanner plugins
      - name: Cache SonarQube scanner
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/sonar-project.properties') }}
          restore-keys: ${{ runner.os }}-sonar-

      # 4) Cache both Gradle wrapper distribution and downloaded dependencies
      - name: Cache Gradle wrapper & caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: |
            ${{ runner.os }}-gradle-
            ${{ hashFiles('**/build.gradle*','**/settings.gradle*','gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 5) (Optional) Cache Maven local repo if you use any Maven modules
      - name: Cache Maven local repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      # 6) Run build + Sonar analysis
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonar --info
